import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { getParkingLots } from "../../api/parkingAPI";
import { ParkingLotData } from "./parkingLotSlice";

export interface ParkingLotsState {
  parkingLots: ParkingLotData[];
  loading: boolean;
  error: boolean;
  errorMessages: string[];
}

const initialState: ParkingLotsState = {
  parkingLots: [],
  loading: true,
  error: false,
  errorMessages: []
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// PARKINGS
export const parkingLots = createAsyncThunk(
  "parking/parking_lots",
  async (payload: { token: string | undefined }, { rejectWithValue }) => {
    const response = await getParkingLots(
      payload.token,
    );
    if (response.errors) {
      // The value we return becomes the `rejected` action payload
      return rejectWithValue(response);
    }
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const parkingLotsSlice = createSlice({
  name: "parking_lots",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetErrorState: (state) => {
      state.error = false;
      state.errorMessages = [];
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(parkingLots.pending, (state) => {
        state.loading = true;
        state.error = false;
        state.errorMessages = [];
      })
      .addCase(parkingLots.fulfilled, (state, action: any) => {
        state.parkingLots = action.payload
        state.loading = false;
        state.error = false;
        state.errorMessages = [];
      })
      .addCase(parkingLots.rejected, (state, action: any) => {
        state.loading = false;
        state.error = true;
        state.errorMessages = action.payload.errors;
      });
  },
});

export const { resetErrorState } = parkingLotsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default parkingLotsSlice.reducer;