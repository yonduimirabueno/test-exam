import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { getParkingLot } from "../../api/parkingAPI";

export interface Accessway { 
  id: number;
  parking_lot_id: number;
}

export interface Distance { 
  id: number;
  accessway_id: number;
  parking_lot_id: number;
  distance: number;
}

export interface ParkingSlot { 
  id: number;
  parking_lot_id: number;
  time_in?: Date;
  rate: number;
  is_out_of_service?: boolean;
}

export interface ParkingSlotAndDistance {
  id: number;
  parking_slot: ParkingSlot;
  distances: Distance[];
}
export interface ParkingLotData {
  id: number;
  name: string;
  flat_rate: number;
  whole_day_flat_rate: number;
  accessways?: Accessway[];
  parking_slots?: ParkingSlotAndDistance[];
  loading: boolean;
  error: boolean;
  errorMessages: string[];
}

export interface ParkingLotState {
  parkingLot: ParkingLotData | undefined;
  loading: boolean;
  error: boolean;
  errorMessages: string[];
}

const initialState: ParkingLotState = {
  parkingLot: undefined,
  loading: true,
  error: false,
  errorMessages: []
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// PARKINGS

export const parkingLot = createAsyncThunk(
  "parking/parking_lot",
  async (payload: {token: string | undefined, id: number}, { rejectWithValue }) => {
    const response = await getParkingLot(
      payload.token,
      payload.id
    );
    if (response.errors) {
      // The value we return becomes the `rejected` action payload
      return rejectWithValue(response);
    }
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const parkingLotSlice = createSlice({
  name: "parking_lot",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetErrorState: (state) => {
      state.error = false;
      state.errorMessages = [];
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(parkingLot.pending, (state) => {
        state.loading = true;
        state.error = false;
        state.errorMessages = [];
      })
      .addCase(parkingLot.fulfilled, (state, action: any) => {
        state.parkingLot = action.payload
        state.loading = false;
        state.error = false;
        state.errorMessages = [];
      })
      .addCase(parkingLot.rejected, (state, action: any) => {
        state.loading = false;
        state.error = true;
        state.errorMessages = action.payload.errors;
      });
  },
});

export const { resetErrorState } = parkingLotSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default parkingLotSlice.reducer;